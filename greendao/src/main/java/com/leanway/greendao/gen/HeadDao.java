package com.leanway.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.leanway.greendao.bean.Head;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HEAD".
*/
public class HeadDao extends AbstractDao<Head, Long> {

    public static final String TABLENAME = "HEAD";

    /**
     * Properties of entity Head.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Hid = new Property(0, Long.class, "hid", true, "_id");
        public final static Property HeadUrl = new Property(1, String.class, "headUrl", false, "HEAD_URL");
    };


    public HeadDao(DaoConfig config) {
        super(config);
    }
    
    public HeadDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HEAD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: hid
                "\"HEAD_URL\" TEXT);"); // 1: headUrl
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HEAD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Head entity) {
        stmt.clearBindings();
 
        Long hid = entity.getHid();
        if (hid != null) {
            stmt.bindLong(1, hid);
        }
 
        String headUrl = entity.getHeadUrl();
        if (headUrl != null) {
            stmt.bindString(2, headUrl);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Head entity) {
        stmt.clearBindings();
 
        Long hid = entity.getHid();
        if (hid != null) {
            stmt.bindLong(1, hid);
        }
 
        String headUrl = entity.getHeadUrl();
        if (headUrl != null) {
            stmt.bindString(2, headUrl);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Head readEntity(Cursor cursor, int offset) {
        Head entity = new Head( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // hid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // headUrl
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Head entity, int offset) {
        entity.setHid(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setHeadUrl(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Head entity, long rowId) {
        entity.setHid(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Head entity) {
        if(entity != null) {
            return entity.getHid();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
